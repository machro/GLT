/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.tue.glt.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.tue.glt.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.tue.glt.services.PlatoonGrammarAccess;

}
@parser::members {
	private PlatoonGrammarAccess grammarAccess;

	public void setGrammarAccess(PlatoonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlatoon
entryRulePlatoon
:
{ before(grammarAccess.getPlatoonRule()); }
	 rulePlatoon
{ after(grammarAccess.getPlatoonRule()); } 
	 EOF 
;

// Rule Platoon
rulePlatoon 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlatoonAccess().getGroup()); }
		(rule__Platoon__Group__0)
		{ after(grammarAccess.getPlatoonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFV
entryRuleFV
:
{ before(grammarAccess.getFVRule()); }
	 ruleFV
{ after(grammarAccess.getFVRule()); } 
	 EOF 
;

// Rule FV
ruleFV 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFVAccess().getGroup()); }
		(rule__FV__Group__0)
		{ after(grammarAccess.getFVAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLV
entryRuleLV
:
{ before(grammarAccess.getLVRule()); }
	 ruleLV
{ after(grammarAccess.getLVRule()); } 
	 EOF 
;

// Rule LV
ruleLV 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLVAccess().getGroup()); }
		(rule__LV__Group__0)
		{ after(grammarAccess.getLVAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoute
entryRuleRoute
:
{ before(grammarAccess.getRouteRule()); }
	 ruleRoute
{ after(grammarAccess.getRouteRule()); } 
	 EOF 
;

// Rule Route
ruleRoute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRouteAccess().getGroup()); }
		(rule__Route__Group__0)
		{ after(grammarAccess.getRouteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForward
entryRuleForward
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardAccess().getGroup()); }
		(rule__Forward__Group__0)
		{ after(grammarAccess.getForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraints
entryRuleConstraints
:
{ before(grammarAccess.getConstraintsRule()); }
	 ruleConstraints
{ after(grammarAccess.getConstraintsRule()); } 
	 EOF 
;

// Rule Constraints
ruleConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintsAccess().getGroup()); }
		(rule__Constraints__Group__0)
		{ after(grammarAccess.getConstraintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getTurnParserRuleCall_0()); }
		ruleTurn
		{ after(grammarAccess.getActionAccess().getTurnParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getForwardParserRuleCall_1()); }
		ruleForward
		{ after(grammarAccess.getActionAccess().getForwardParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnAccess().getLeftParserRuleCall_1_0()); }
		ruleLeft
		{ after(grammarAccess.getTurnAccess().getLeftParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTurnAccess().getRightParserRuleCall_1_1()); }
		ruleRight
		{ after(grammarAccess.getTurnAccess().getRightParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPlatoonsAssignment_0()); }
	(rule__Model__PlatoonsAssignment_0)
	{ after(grammarAccess.getModelAccess().getPlatoonsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRoutesAssignment_1()); }
	(rule__Model__RoutesAssignment_1)
	{ after(grammarAccess.getModelAccess().getRoutesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsAssignment_2()); }
	(rule__Model__ConstraintsAssignment_2)
	{ after(grammarAccess.getModelAccess().getConstraintsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Platoon__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__0__Impl
	rule__Platoon__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getPlatoonKeyword_0()); }
	'platoon:'
	{ after(grammarAccess.getPlatoonAccess().getPlatoonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__1__Impl
	rule__Platoon__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getFirstAssignment_1()); }
	(rule__Platoon__FirstAssignment_1)
	{ after(grammarAccess.getPlatoonAccess().getFirstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Platoon__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlatoonAccess().getFollowersAssignment_2()); }
	(rule__Platoon__FollowersAssignment_2)*
	{ after(grammarAccess.getPlatoonAccess().getFollowersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FV__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__0__Impl
	rule__FV__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getFVAction_0()); }
	()
	{ after(grammarAccess.getFVAccess().getFVAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__1__Impl
	rule__FV__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getFVKeyword_1()); }
	'FV'
	{ after(grammarAccess.getFVAccess().getFVKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__2__Impl
	rule__FV__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getNameAssignment_2()); }
	(rule__FV__NameAssignment_2)
	{ after(grammarAccess.getFVAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__3__Impl
	rule__FV__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getFrontKeyword_3()); }
	'front'
	{ after(grammarAccess.getFVAccess().getFrontKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__4__Impl
	rule__FV__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getRunnerKeyword_4()); }
	'runner'
	{ after(grammarAccess.getFVAccess().getRunnerKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FV__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFVAccess().getPulledByAssignment_5()); }
	(rule__FV__PulledByAssignment_5)
	{ after(grammarAccess.getFVAccess().getPulledByAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LV__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LV__Group__0__Impl
	rule__LV__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLVAccess().getLVAction_0()); }
	()
	{ after(grammarAccess.getLVAccess().getLVAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LV__Group__1__Impl
	rule__LV__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLVAccess().getLVKeyword_1()); }
	'LV'
	{ after(grammarAccess.getLVAccess().getLVKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LV__Group__2__Impl
	rule__LV__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLVAccess().getNameAssignment_2()); }
	(rule__LV__NameAssignment_2)
	{ after(grammarAccess.getLVAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LV__Group__3__Impl
	rule__LV__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLVAccess().getRouteKeyword_3()); }
	'route'
	{ after(grammarAccess.getLVAccess().getRouteKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LV__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLVAccess().getRouteAssignment_4()); }
	(rule__LV__RouteAssignment_4)
	{ after(grammarAccess.getLVAccess().getRouteAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Route__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__0__Impl
	rule__Route__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getRouteKeyword_0()); }
	'route'
	{ after(grammarAccess.getRouteAccess().getRouteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__1__Impl
	rule__Route__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getNameAssignment_1()); }
	(rule__Route__NameAssignment_1)
	{ after(grammarAccess.getRouteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__2__Impl
	rule__Route__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRouteAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getRouteAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Route__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRouteAccess().getActionsAssignment_3()); }
		(rule__Route__ActionsAssignment_3)
		{ after(grammarAccess.getRouteAccess().getActionsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getRouteAccess().getActionsAssignment_3()); }
		(rule__Route__ActionsAssignment_3)*
		{ after(grammarAccess.getRouteAccess().getActionsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnKeyword_0()); }
	'turn'
	{ after(grammarAccess.getTurnAccess().getTurnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getAlternatives_1()); }
	(rule__Turn__Alternatives_1)
	{ after(grammarAccess.getTurnAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getForwardAction_0()); }
	()
	{ after(grammarAccess.getForwardAccess().getForwardAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__1__Impl
	rule__Forward__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getForwardKeyword_1()); }
	'forward('
	{ after(grammarAccess.getForwardAccess().getForwardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__2__Impl
	rule__Forward__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getDistanceAssignment_2()); }
	(rule__Forward__DistanceAssignment_2)
	{ after(grammarAccess.getForwardAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getForwardAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftAction_0()); }
	()
	{ after(grammarAccess.getLeftAccess().getLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
	'Left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightAction_0()); }
	()
	{ after(grammarAccess.getRightAccess().getRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_1()); }
	'Right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__0__Impl
	rule__Constraints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getConstraintsKeyword_0()); }
	'constraints:'
	{ after(grammarAccess.getConstraintsAccess().getConstraintsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__1__Impl
	rule__Constraints__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getMinHeadwayAssignment_1()); }
	(rule__Constraints__MinHeadwayAssignment_1)
	{ after(grammarAccess.getConstraintsAccess().getMinHeadwayAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__2__Impl
	rule__Constraints__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_2()); }
	'<='
	{ after(grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__3__Impl
	rule__Constraints__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getHeadwayKeyword_3()); }
	'headway'
	{ after(grammarAccess.getConstraintsAccess().getHeadwayKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__4__Impl
	rule__Constraints__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_4()); }
	'<='
	{ after(grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraints__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsAccess().getMaxHeadwayAssignment_5()); }
	(rule__Constraints__MaxHeadwayAssignment_5)
	{ after(grammarAccess.getConstraintsAccess().getMaxHeadwayAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PlatoonsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPlatoonsPlatoonParserRuleCall_0_0()); }
		rulePlatoon
		{ after(grammarAccess.getModelAccess().getPlatoonsPlatoonParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__RoutesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRoutesRouteParserRuleCall_1_0()); }
		ruleRoute
		{ after(grammarAccess.getModelAccess().getRoutesRouteParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstraintsParserRuleCall_2_0()); }
		ruleConstraints
		{ after(grammarAccess.getModelAccess().getConstraintsConstraintsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__FirstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlatoonAccess().getFirstLVParserRuleCall_1_0()); }
		ruleLV
		{ after(grammarAccess.getPlatoonAccess().getFirstLVParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Platoon__FollowersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlatoonAccess().getFollowersFVParserRuleCall_2_0()); }
		ruleFV
		{ after(grammarAccess.getPlatoonAccess().getFollowersFVParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFVAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFVAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FV__PulledByAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFVAccess().getPulledByVehicleCrossReference_5_0()); }
		(
			{ before(grammarAccess.getFVAccess().getPulledByVehicleIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFVAccess().getPulledByVehicleIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getFVAccess().getPulledByVehicleCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLVAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLVAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LV__RouteAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLVAccess().getRouteRouteCrossReference_4_0()); }
		(
			{ before(grammarAccess.getLVAccess().getRouteRouteIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getLVAccess().getRouteRouteIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getLVAccess().getRouteRouteCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRouteAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRouteAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Route__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRouteAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getRouteAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardAccess().getDistanceINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getForwardAccess().getDistanceINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__MinHeadwayAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getMinHeadwayINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getConstraintsAccess().getMinHeadwayINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraints__MaxHeadwayAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsAccess().getMaxHeadwayINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getConstraintsAccess().getMaxHeadwayINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
