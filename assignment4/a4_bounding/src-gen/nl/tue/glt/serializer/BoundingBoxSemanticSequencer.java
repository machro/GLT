/*
 * generated by Xtext 2.10.0
 */
package nl.tue.glt.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.tue.glt.boundingBox.BoundingBoxPackage;
import nl.tue.glt.boundingBox.Model;
import nl.tue.glt.boundingBox.MoveDown;
import nl.tue.glt.boundingBox.MoveLeft;
import nl.tue.glt.boundingBox.MoveRight;
import nl.tue.glt.boundingBox.MoveUp;
import nl.tue.glt.services.BoundingBoxGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BoundingBoxSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BoundingBoxGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BoundingBoxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BoundingBoxPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BoundingBoxPackage.MOVE_DOWN:
				sequence_MoveDown(context, (MoveDown) semanticObject); 
				return; 
			case BoundingBoxPackage.MOVE_LEFT:
				sequence_MoveLeft(context, (MoveLeft) semanticObject); 
				return; 
			case BoundingBoxPackage.MOVE_RIGHT:
				sequence_MoveRight(context, (MoveRight) semanticObject); 
				return; 
			case BoundingBoxPackage.MOVE_UP:
				sequence_MoveUp(context, (MoveUp) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     moveCommands+=Move*
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MoveDown
	 *     MoveY returns MoveDown
	 *     MoveDown returns MoveDown
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_MoveDown(ISerializationContext context, MoveDown semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveDownAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MoveLeft
	 *     MoveX returns MoveLeft
	 *     MoveLeft returns MoveLeft
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_MoveLeft(ISerializationContext context, MoveLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveLeftAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MoveRight
	 *     MoveX returns MoveRight
	 *     MoveRight returns MoveRight
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_MoveRight(ISerializationContext context, MoveRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveRightAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Move returns MoveUp
	 *     MoveY returns MoveUp
	 *     MoveUp returns MoveUp
	 *
	 * Constraint:
	 *     distance=INT
	 */
	protected void sequence_MoveUp(ISerializationContext context, MoveUp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BoundingBoxPackage.Literals.MOVE__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveUpAccess().getDistanceINTTerminalRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
}
