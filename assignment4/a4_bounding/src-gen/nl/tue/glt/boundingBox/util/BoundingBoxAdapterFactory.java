/**
 * generated by Xtext 2.10.0
 */
package nl.tue.glt.boundingBox.util;

import nl.tue.glt.boundingBox.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.tue.glt.boundingBox.BoundingBoxPackage
 * @generated
 */
public class BoundingBoxAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BoundingBoxPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoundingBoxAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BoundingBoxPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BoundingBoxSwitch<Adapter> modelSwitch =
    new BoundingBoxSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseMove(Move object)
      {
        return createMoveAdapter();
      }
      @Override
      public Adapter caseMoveX(MoveX object)
      {
        return createMoveXAdapter();
      }
      @Override
      public Adapter caseMoveY(MoveY object)
      {
        return createMoveYAdapter();
      }
      @Override
      public Adapter caseMoveLeft(MoveLeft object)
      {
        return createMoveLeftAdapter();
      }
      @Override
      public Adapter caseMoveRight(MoveRight object)
      {
        return createMoveRightAdapter();
      }
      @Override
      public Adapter caseMoveUp(MoveUp object)
      {
        return createMoveUpAdapter();
      }
      @Override
      public Adapter caseMoveDown(MoveDown object)
      {
        return createMoveDownAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.Move <em>Move</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.Move
   * @generated
   */
  public Adapter createMoveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveX <em>Move X</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveX
   * @generated
   */
  public Adapter createMoveXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveY <em>Move Y</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveY
   * @generated
   */
  public Adapter createMoveYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveLeft <em>Move Left</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveLeft
   * @generated
   */
  public Adapter createMoveLeftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveRight <em>Move Right</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveRight
   * @generated
   */
  public Adapter createMoveRightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveUp <em>Move Up</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveUp
   * @generated
   */
  public Adapter createMoveUpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.glt.boundingBox.MoveDown <em>Move Down</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.glt.boundingBox.MoveDown
   * @generated
   */
  public Adapter createMoveDownAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BoundingBoxAdapterFactory
