/*
 * generated by Xtext 2.10.0
 */
grammar InternalBoundingBox;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.glt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.glt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.glt.services.BoundingBoxGrammarAccess;

}

@parser::members {

 	private BoundingBoxGrammarAccess grammarAccess;

    public InternalBoundingBoxParser(TokenStream input, BoundingBoxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BoundingBoxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		otherlv_1='Box:'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getBoxKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getMoveCommandsMoveParserRuleCall_2_0());
				}
				lv_moveCommands_2_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"moveCommands",
						lv_moveCommands_2_0,
						"nl.tue.glt.BoundingBox.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMoveAccess().getMoveXParserRuleCall_0());
		}
		this_MoveX_0=ruleMoveX
		{
			$current = $this_MoveX_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveAccess().getMoveYParserRuleCall_1());
		}
		this_MoveY_1=ruleMoveY
		{
			$current = $this_MoveY_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMoveX
entryRuleMoveX returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveXRule()); }
	iv_ruleMoveX=ruleMoveX
	{ $current=$iv_ruleMoveX.current; }
	EOF;

// Rule MoveX
ruleMoveX returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMoveXAccess().getMoveLeftParserRuleCall_0());
		}
		this_MoveLeft_0=ruleMoveLeft
		{
			$current = $this_MoveLeft_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveXAccess().getMoveRightParserRuleCall_1());
		}
		this_MoveRight_1=ruleMoveRight
		{
			$current = $this_MoveRight_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMoveY
entryRuleMoveY returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveYRule()); }
	iv_ruleMoveY=ruleMoveY
	{ $current=$iv_ruleMoveY.current; }
	EOF;

// Rule MoveY
ruleMoveY returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMoveYAccess().getMoveUpParserRuleCall_0());
		}
		this_MoveUp_0=ruleMoveUp
		{
			$current = $this_MoveUp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMoveYAccess().getMoveDownParserRuleCall_1());
		}
		this_MoveDown_1=ruleMoveDown
		{
			$current = $this_MoveDown_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveLeftRule()); }
	iv_ruleMoveLeft=ruleMoveLeft
	{ $current=$iv_ruleMoveLeft.current; }
	EOF;

// Rule MoveLeft
ruleMoveLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='left'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveLeftAccess().getLeftKeyword_0());
		}
		(
			(
				lv_distance_1_0=RULE_INT
				{
					newLeafNode(lv_distance_1_0, grammarAccess.getMoveLeftAccess().getDistanceINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveLeftRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMoveRight
entryRuleMoveRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRightRule()); }
	iv_ruleMoveRight=ruleMoveRight
	{ $current=$iv_ruleMoveRight.current; }
	EOF;

// Rule MoveRight
ruleMoveRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='right'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveRightAccess().getRightKeyword_0());
		}
		(
			(
				lv_distance_1_0=RULE_INT
				{
					newLeafNode(lv_distance_1_0, grammarAccess.getMoveRightAccess().getDistanceINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRightRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMoveUp
entryRuleMoveUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveUpRule()); }
	iv_ruleMoveUp=ruleMoveUp
	{ $current=$iv_ruleMoveUp.current; }
	EOF;

// Rule MoveUp
ruleMoveUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='up'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveUpAccess().getUpKeyword_0());
		}
		(
			(
				lv_distance_1_0=RULE_INT
				{
					newLeafNode(lv_distance_1_0, grammarAccess.getMoveUpAccess().getDistanceINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveUpRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMoveDown
entryRuleMoveDown returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveDownRule()); }
	iv_ruleMoveDown=ruleMoveDown
	{ $current=$iv_ruleMoveDown.current; }
	EOF;

// Rule MoveDown
ruleMoveDown returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='down'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveDownAccess().getDownKeyword_0());
		}
		(
			(
				lv_distance_1_0=RULE_INT
				{
					newLeafNode(lv_distance_1_0, grammarAccess.getMoveDownAccess().getDistanceINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveDownRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
