/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.glt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.glt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.glt.services.PlatoonGrammarAccess;

}

@parser::members {

 	private PlatoonGrammarAccess grammarAccess;

    public InternalPlatoonParser(TokenStream input, PlatoonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PlatoonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPlatoonsPlatoonParserRuleCall_0_0());
				}
				lv_platoons_0_0=rulePlatoon
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"platoons",
						lv_platoons_0_0,
						"nl.tue.glt.Platoon.Platoon");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRoutesRouteParserRuleCall_1_0());
				}
				lv_routes_1_0=ruleRoute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"routes",
						lv_routes_1_0,
						"nl.tue.glt.Platoon.Route");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConstraintsConstraintsParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_2_0,
						"nl.tue.glt.Platoon.Constraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePlatoon
entryRulePlatoon returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlatoonRule()); }
	iv_rulePlatoon=rulePlatoon
	{ $current=$iv_rulePlatoon.current; }
	EOF;

// Rule Platoon
rulePlatoon returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='platoon:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlatoonAccess().getPlatoonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getFirstLVParserRuleCall_1_0());
				}
				lv_first_1_0=ruleLV
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					set(
						$current,
						"first",
						lv_first_1_0,
						"nl.tue.glt.Platoon.LV");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getFollowersFVParserRuleCall_2_0());
				}
				lv_followers_2_0=ruleFV
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					add(
						$current,
						"followers",
						lv_followers_2_0,
						"nl.tue.glt.Platoon.FV");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFV
entryRuleFV returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFVRule()); }
	iv_ruleFV=ruleFV
	{ $current=$iv_ruleFV.current; }
	EOF;

// Rule FV
ruleFV returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFVAccess().getFVAction_0(),
					$current);
			}
		)
		otherlv_1='FV'
		{
			newLeafNode(otherlv_1, grammarAccess.getFVAccess().getFVKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFVAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFVRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='front'
		{
			newLeafNode(otherlv_3, grammarAccess.getFVAccess().getFrontKeyword_3());
		}
		otherlv_4='runner'
		{
			newLeafNode(otherlv_4, grammarAccess.getFVAccess().getRunnerKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFVRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getFVAccess().getPulledByVehicleCrossReference_5_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLV
entryRuleLV returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLVRule()); }
	iv_ruleLV=ruleLV
	{ $current=$iv_ruleLV.current; }
	EOF;

// Rule LV
ruleLV returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLVAccess().getLVAction_0(),
					$current);
			}
		)
		otherlv_1='LV'
		{
			newLeafNode(otherlv_1, grammarAccess.getLVAccess().getLVKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLVAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLVRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='route'
		{
			newLeafNode(otherlv_3, grammarAccess.getLVAccess().getRouteKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLVRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getLVAccess().getRouteRouteCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRoute
entryRuleRoute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteRule()); }
	iv_ruleRoute=ruleRoute
	{ $current=$iv_ruleRoute.current; }
	EOF;

// Rule Route
ruleRoute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='route'
		{
			newLeafNode(otherlv_0, grammarAccess.getRouteAccess().getRouteKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRouteAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRouteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRouteAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getActionsActionParserRuleCall_3_0());
				}
				lv_actions_3_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"actions",
						lv_actions_3_0,
						"nl.tue.glt.Platoon.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getTurnParserRuleCall_0());
		}
		this_Turn_0=ruleTurn
		{
			$current = $this_Turn_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getForwardParserRuleCall_1());
		}
		this_Forward_1=ruleForward
		{
			$current = $this_Forward_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTurn
entryRuleTurn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRule()); }
	iv_ruleTurn=ruleTurn
	{ $current=$iv_ruleTurn.current; }
	EOF;

// Rule Turn
ruleTurn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='turn'
		{
			newLeafNode(otherlv_0, grammarAccess.getTurnAccess().getTurnKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTurnAccess().getLeftParserRuleCall_1_0());
			}
			this_Left_1=ruleLeft
			{
				$current = $this_Left_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getTurnAccess().getRightParserRuleCall_1_1());
			}
			this_Right_2=ruleRight
			{
				$current = $this_Right_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleForward
entryRuleForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardRule()); }
	iv_ruleForward=ruleForward
	{ $current=$iv_ruleForward.current; }
	EOF;

// Rule Forward
ruleForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForwardAccess().getForwardAction_0(),
					$current);
			}
		)
		otherlv_1='forward('
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardAccess().getForwardKeyword_1());
		}
		(
			(
				lv_distance_2_0=RULE_INT
				{
					newLeafNode(lv_distance_2_0, grammarAccess.getForwardAccess().getDistanceINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForwardRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getForwardAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeftAccess().getLeftAction_0(),
					$current);
			}
		)
		otherlv_1='Left'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getLeftKeyword_1());
		}
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRightAccess().getRightAction_0(),
					$current);
			}
		)
		otherlv_1='Right'
		{
			newLeafNode(otherlv_1, grammarAccess.getRightAccess().getRightKeyword_1());
		}
	)
;

// Entry rule entryRuleConstraints
entryRuleConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsRule()); }
	iv_ruleConstraints=ruleConstraints
	{ $current=$iv_ruleConstraints.current; }
	EOF;

// Rule Constraints
ruleConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsAccess().getConstraintsKeyword_0());
		}
		(
			(
				lv_minHeadway_1_0=RULE_INT
				{
					newLeafNode(lv_minHeadway_1_0, grammarAccess.getConstraintsAccess().getMinHeadwayINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintsRule());
					}
					setWithLastConsumed(
						$current,
						"minHeadway",
						lv_minHeadway_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_2());
		}
		otherlv_3='headway'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstraintsAccess().getHeadwayKeyword_3());
		}
		otherlv_4='<='
		{
			newLeafNode(otherlv_4, grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_4());
		}
		(
			(
				lv_maxHeadway_5_0=RULE_INT
				{
					newLeafNode(lv_maxHeadway_5_0, grammarAccess.getConstraintsAccess().getMaxHeadwayINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintsRule());
					}
					setWithLastConsumed(
						$current,
						"maxHeadway",
						lv_maxHeadway_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
