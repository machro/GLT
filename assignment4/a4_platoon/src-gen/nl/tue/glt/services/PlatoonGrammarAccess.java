/*
 * generated by Xtext 2.10.0
 */
package nl.tue.glt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PlatoonGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlatoonsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlatoonsPlatoonParserRuleCall_0_0 = (RuleCall)cPlatoonsAssignment_0.eContents().get(0);
		private final Assignment cRoutesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoutesRouteParserRuleCall_1_0 = (RuleCall)cRoutesAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintsParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		
		//Model:
		//	platoons=Platoon
		//	routes=Route
		//	constraints=Constraints;
		@Override public ParserRule getRule() { return rule; }
		
		//platoons=Platoon routes=Route constraints=Constraints
		public Group getGroup() { return cGroup; }
		
		//platoons=Platoon
		public Assignment getPlatoonsAssignment_0() { return cPlatoonsAssignment_0; }
		
		//Platoon
		public RuleCall getPlatoonsPlatoonParserRuleCall_0_0() { return cPlatoonsPlatoonParserRuleCall_0_0; }
		
		//routes=Route
		public Assignment getRoutesAssignment_1() { return cRoutesAssignment_1; }
		
		//Route
		public RuleCall getRoutesRouteParserRuleCall_1_0() { return cRoutesRouteParserRuleCall_1_0; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_2_0() { return cConstraintsConstraintsParserRuleCall_2_0; }
	}
	public class PlatoonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Platoon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlatoonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstLVParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Assignment cFollowersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFollowersFVParserRuleCall_2_0 = (RuleCall)cFollowersAssignment_2.eContents().get(0);
		
		//Platoon:
		//	'platoon:'
		//	first=LV
		//	followers+=FV*;
		@Override public ParserRule getRule() { return rule; }
		
		//'platoon:' first=LV followers+=FV*
		public Group getGroup() { return cGroup; }
		
		//'platoon:'
		public Keyword getPlatoonKeyword_0() { return cPlatoonKeyword_0; }
		
		//first=LV
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//LV
		public RuleCall getFirstLVParserRuleCall_1_0() { return cFirstLVParserRuleCall_1_0; }
		
		//followers+=FV*
		public Assignment getFollowersAssignment_2() { return cFollowersAssignment_2; }
		
		//FV
		public RuleCall getFollowersFVParserRuleCall_2_0() { return cFollowersFVParserRuleCall_2_0; }
	}
	public class FVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.FV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFVKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFrontKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRunnerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPulledByAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPulledByVehicleCrossReference_5_0 = (CrossReference)cPulledByAssignment_5.eContents().get(0);
		private final RuleCall cPulledByVehicleIDTerminalRuleCall_5_0_1 = (RuleCall)cPulledByVehicleCrossReference_5_0.eContents().get(1);
		
		//FV:
		//	{FV}
		//	'FV' name=ID 'front' 'runner' pulledBy=[Vehicle];
		@Override public ParserRule getRule() { return rule; }
		
		//{FV} 'FV' name=ID 'front' 'runner' pulledBy=[Vehicle]
		public Group getGroup() { return cGroup; }
		
		//{FV}
		public Action getFVAction_0() { return cFVAction_0; }
		
		//'FV'
		public Keyword getFVKeyword_1() { return cFVKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'front'
		public Keyword getFrontKeyword_3() { return cFrontKeyword_3; }
		
		//'runner'
		public Keyword getRunnerKeyword_4() { return cRunnerKeyword_4; }
		
		//pulledBy=[Vehicle]
		public Assignment getPulledByAssignment_5() { return cPulledByAssignment_5; }
		
		//[Vehicle]
		public CrossReference getPulledByVehicleCrossReference_5_0() { return cPulledByVehicleCrossReference_5_0; }
		
		//ID
		public RuleCall getPulledByVehicleIDTerminalRuleCall_5_0_1() { return cPulledByVehicleIDTerminalRuleCall_5_0_1; }
	}
	public class LVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.LV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLVAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLVKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRouteKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRouteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRouteRouteCrossReference_4_0 = (CrossReference)cRouteAssignment_4.eContents().get(0);
		private final RuleCall cRouteRouteIDTerminalRuleCall_4_0_1 = (RuleCall)cRouteRouteCrossReference_4_0.eContents().get(1);
		
		//LV:
		//	{LV}
		//	'LV' name=ID 'route' route=[Route];
		@Override public ParserRule getRule() { return rule; }
		
		//{LV} 'LV' name=ID 'route' route=[Route]
		public Group getGroup() { return cGroup; }
		
		//{LV}
		public Action getLVAction_0() { return cLVAction_0; }
		
		//'LV'
		public Keyword getLVKeyword_1() { return cLVKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'route'
		public Keyword getRouteKeyword_3() { return cRouteKeyword_3; }
		
		//route=[Route]
		public Assignment getRouteAssignment_4() { return cRouteAssignment_4; }
		
		//[Route]
		public CrossReference getRouteRouteCrossReference_4_0() { return cRouteRouteCrossReference_4_0; }
		
		//ID
		public RuleCall getRouteRouteIDTerminalRuleCall_4_0_1() { return cRouteRouteIDTerminalRuleCall_4_0_1; }
	}
	public class VehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Vehicle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLVParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFVParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Vehicle:
		//	LV | FV;
		@Override public ParserRule getRule() { return rule; }
		
		//LV | FV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LV
		public RuleCall getLVParserRuleCall_0() { return cLVParserRuleCall_0; }
		
		//FV
		public RuleCall getFVParserRuleCall_1() { return cFVParserRuleCall_1; }
	}
	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRouteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		
		//Route:
		//	'route' name=ID ':'
		//	actions+=Action+;
		@Override public ParserRule getRule() { return rule; }
		
		//'route' name=ID ':' actions+=Action+
		public Group getGroup() { return cGroup; }
		
		//'route'
		public Keyword getRouteKeyword_0() { return cRouteKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTurnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// At least one action in the route
		//Action:
		//	Turn | Forward;
		@Override public ParserRule getRule() { return rule; }
		
		//Turn | Forward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_0() { return cTurnParserRuleCall_0; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_1() { return cForwardParserRuleCall_1; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cRightParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Turn:
		//	'turn' (Left | Right);
		@Override public ParserRule getRule() { return rule; }
		
		//'turn' (Left | Right)
		public Group getGroup() { return cGroup; }
		
		//'turn'
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//(Left | Right)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Left
		public RuleCall getLeftParserRuleCall_1_0() { return cLeftParserRuleCall_1_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_1_1() { return cRightParserRuleCall_1_1; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceINTTerminalRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forward:
		//	{Forward}
		//	'forward(' distance=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Forward} 'forward(' distance=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{Forward}
		public Action getForwardAction_0() { return cForwardAction_0; }
		
		//'forward('
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
		
		//distance=INT
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_2_0() { return cDistanceINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Left:
		//	{Left}
		//	'Left';
		@Override public ParserRule getRule() { return rule; }
		
		//{Left} 'Left'
		public Group getGroup() { return cGroup; }
		
		//{Left}
		public Action getLeftAction_0() { return cLeftAction_0; }
		
		//'Left'
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Right:
		//	{Right}
		//	'Right';
		@Override public ParserRule getRule() { return rule; }
		
		//{Right} 'Right'
		public Group getGroup() { return cGroup; }
		
		//{Right}
		public Action getRightAction_0() { return cRightAction_0; }
		
		//'Right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.Platoon.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinHeadwayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinHeadwayINTTerminalRuleCall_1_0 = (RuleCall)cMinHeadwayAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHeadwayKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxHeadwayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxHeadwayINTTerminalRuleCall_5_0 = (RuleCall)cMaxHeadwayAssignment_5.eContents().get(0);
		
		//Constraints:
		//	'constraints:'
		//	minHeadway=INT '<=' 'headway' '<=' maxHeadway=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints:' minHeadway=INT '<=' 'headway' '<=' maxHeadway=INT
		public Group getGroup() { return cGroup; }
		
		//'constraints:'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//minHeadway=INT
		public Assignment getMinHeadwayAssignment_1() { return cMinHeadwayAssignment_1; }
		
		//INT
		public RuleCall getMinHeadwayINTTerminalRuleCall_1_0() { return cMinHeadwayINTTerminalRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'headway'
		public Keyword getHeadwayKeyword_3() { return cHeadwayKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//maxHeadway=INT
		public Assignment getMaxHeadwayAssignment_5() { return cMaxHeadwayAssignment_5; }
		
		//INT
		public RuleCall getMaxHeadwayINTTerminalRuleCall_5_0() { return cMaxHeadwayINTTerminalRuleCall_5_0; }
	}
	
	
	private final ModelElements pModel;
	private final PlatoonElements pPlatoon;
	private final FVElements pFV;
	private final LVElements pLV;
	private final VehicleElements pVehicle;
	private final RouteElements pRoute;
	private final ActionElements pAction;
	private final TurnElements pTurn;
	private final ForwardElements pForward;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final ConstraintsElements pConstraints;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlatoonGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPlatoon = new PlatoonElements();
		this.pFV = new FVElements();
		this.pLV = new LVElements();
		this.pVehicle = new VehicleElements();
		this.pRoute = new RouteElements();
		this.pAction = new ActionElements();
		this.pTurn = new TurnElements();
		this.pForward = new ForwardElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pConstraints = new ConstraintsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.glt.Platoon".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	platoons=Platoon
	//	routes=Route
	//	constraints=Constraints;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Platoon:
	//	'platoon:'
	//	first=LV
	//	followers+=FV*;
	public PlatoonElements getPlatoonAccess() {
		return pPlatoon;
	}
	
	public ParserRule getPlatoonRule() {
		return getPlatoonAccess().getRule();
	}
	
	//FV:
	//	{FV}
	//	'FV' name=ID 'front' 'runner' pulledBy=[Vehicle];
	public FVElements getFVAccess() {
		return pFV;
	}
	
	public ParserRule getFVRule() {
		return getFVAccess().getRule();
	}
	
	//LV:
	//	{LV}
	//	'LV' name=ID 'route' route=[Route];
	public LVElements getLVAccess() {
		return pLV;
	}
	
	public ParserRule getLVRule() {
		return getLVAccess().getRule();
	}
	
	//Vehicle:
	//	LV | FV;
	public VehicleElements getVehicleAccess() {
		return pVehicle;
	}
	
	public ParserRule getVehicleRule() {
		return getVehicleAccess().getRule();
	}
	
	//Route:
	//	'route' name=ID ':'
	//	actions+=Action+;
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}
	
	//// At least one action in the route
	//Action:
	//	Turn | Forward;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Turn:
	//	'turn' (Left | Right);
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Forward:
	//	{Forward}
	//	'forward(' distance=INT ')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Left:
	//	{Left}
	//	'Left';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	{Right}
	//	'Right';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Constraints:
	//	'constraints:'
	//	minHeadway=INT '<=' 'headway' '<=' maxHeadway=INT;
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
